// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WorkerManager.Data;

namespace WorkerManager.Migrations
{
    [DbContext(typeof(ClusterDbContext))]
    [Migration("20211118153829_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("SharedHost.Models.Cluster.Cluster", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("ManagerAccountId")
                        .HasColumnType("integer");

                    b.Property<bool>("Private")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("Register")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("current_timestamp");

                    b.HasKey("ID");

                    b.HasIndex("ManagerAccountId");

                    b.ToTable("Clusters");
                });

            modelBuilder.Entity("SharedHost.Models.Device.DeviceCap", b =>
                {
                    b.Property<int?>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("audioCodec")
                        .HasColumnType("integer");

                    b.Property<int?>("device")
                        .HasColumnType("integer");

                    b.Property<int?>("mode")
                        .HasColumnType("integer");

                    b.Property<int?>("screenHeight")
                        .HasColumnType("integer");

                    b.Property<int?>("screenWidth")
                        .HasColumnType("integer");

                    b.Property<int?>("videoCodec")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.ToTable("DeviceCap");
                });

            modelBuilder.Entity("SharedHost.Models.Device.WorkerNode", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnType("integer");

                    b.Property<string>("CPU")
                        .HasColumnType("text");

                    b.Property<int?>("ClusterID")
                        .HasColumnType("integer");

                    b.Property<string>("GPU")
                        .HasColumnType("text");

                    b.Property<string>("OS")
                        .HasColumnType("text");

                    b.Property<int?>("RAMcapacity")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Register")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("WorkerState")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("ClusterID");

                    b.ToTable("WorkerNode");
                });

            modelBuilder.Entity("SharedHost.Models.Session.QoE", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("AudioCodec")
                        .HasColumnType("integer");

                    b.Property<int?>("QoEMode")
                        .HasColumnType("integer");

                    b.Property<int?>("ScreenHeight")
                        .HasColumnType("integer");

                    b.Property<int?>("ScreenWidth")
                        .HasColumnType("integer");

                    b.Property<int?>("VideoCodec")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.ToTable("QoEs");
                });

            modelBuilder.Entity("SharedHost.Models.Shell.ScriptModel", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Script")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("ScriptModel");
                });

            modelBuilder.Entity("SharedHost.Models.Shell.ShellSession", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ModelID")
                        .HasColumnType("integer");

                    b.Property<string>("Output")
                        .HasColumnType("text");

                    b.Property<string>("Script")
                        .HasColumnType("text");

                    b.Property<DateTime>("Time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("WorkerID")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("ModelID");

                    b.HasIndex("WorkerID");

                    b.ToTable("CachedSession");
                });

            modelBuilder.Entity("SharedHost.Models.User.UserAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("Avatar")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("DefaultSettingID")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .HasColumnType("text");

                    b.Property<string>("Jobs")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DefaultSettingID");

                    b.ToTable("UserAccount");
                });

            modelBuilder.Entity("WorkerManager.SlaveDevices.ClusterWorkerNode", b =>
                {
                    b.Property<int>("PrivateID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CPU")
                        .HasColumnType("text");

                    b.Property<string>("GPU")
                        .HasColumnType("text");

                    b.Property<int?>("GlobalID")
                        .HasColumnType("integer");

                    b.Property<string>("OS")
                        .HasColumnType("text");

                    b.Property<string>("PrivateIP")
                        .HasColumnType("text");

                    b.Property<int?>("QoEID")
                        .HasColumnType("integer");

                    b.Property<int>("RAMCapacity")
                        .HasColumnType("integer");

                    b.Property<int>("RAMcapacity")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Register")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<string>("RemoteToken")
                        .HasColumnType("text");

                    b.Property<string>("SignallingUrl")
                        .HasColumnType("text");

                    b.Property<string>("_workerState")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("agentUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("coreUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("PrivateID");

                    b.HasIndex("QoEID");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("SharedHost.Models.Cluster.Cluster", b =>
                {
                    b.HasOne("SharedHost.Models.User.UserAccount", "ManagerAccount")
                        .WithMany()
                        .HasForeignKey("ManagerAccountId");

                    b.Navigation("ManagerAccount");
                });

            modelBuilder.Entity("SharedHost.Models.Device.WorkerNode", b =>
                {
                    b.HasOne("SharedHost.Models.Cluster.Cluster", null)
                        .WithMany("Slave")
                        .HasForeignKey("ClusterID");
                });

            modelBuilder.Entity("SharedHost.Models.Shell.ShellSession", b =>
                {
                    b.HasOne("SharedHost.Models.Shell.ScriptModel", "Model")
                        .WithMany()
                        .HasForeignKey("ModelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SharedHost.Models.Device.WorkerNode", "Slave")
                        .WithMany()
                        .HasForeignKey("WorkerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Model");

                    b.Navigation("Slave");
                });

            modelBuilder.Entity("SharedHost.Models.User.UserAccount", b =>
                {
                    b.HasOne("SharedHost.Models.Device.DeviceCap", "DefaultSetting")
                        .WithMany()
                        .HasForeignKey("DefaultSettingID");

                    b.Navigation("DefaultSetting");
                });

            modelBuilder.Entity("WorkerManager.SlaveDevices.ClusterWorkerNode", b =>
                {
                    b.HasOne("SharedHost.Models.Session.QoE", "QoE")
                        .WithMany()
                        .HasForeignKey("QoEID");

                    b.Navigation("QoE");
                });

            modelBuilder.Entity("SharedHost.Models.Cluster.Cluster", b =>
                {
                    b.Navigation("Slave");
                });
#pragma warning restore 612, 618
        }
    }
}
