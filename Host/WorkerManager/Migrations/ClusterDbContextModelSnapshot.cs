// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WorkerManager.Data;

namespace WorkerManager.Migrations
{
    [DbContext(typeof(ClusterDbContext))]
    partial class ClusterDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("SharedHost.Models.Cluster.LocalCluster", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("Private")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("Register")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<string>("Token")
                        .HasColumnType("text");

                    b.Property<string>("TurnUrl")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Clusters");
                });

            modelBuilder.Entity("SharedHost.Models.Device.WorkerNode", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnType("integer");

                    b.Property<string>("CPU")
                        .HasColumnType("text");

                    b.Property<string>("GPU")
                        .HasColumnType("text");

                    b.Property<int?>("LocalClusterID")
                        .HasColumnType("integer");

                    b.Property<string>("OS")
                        .HasColumnType("text");

                    b.Property<int?>("RAMcapacity")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Register")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("WorkerState")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("LocalClusterID");

                    b.ToTable("WorkerNode");
                });

            modelBuilder.Entity("SharedHost.Models.Session.QoE", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("AudioCodec")
                        .HasColumnType("integer");

                    b.Property<int?>("QoEMode")
                        .HasColumnType("integer");

                    b.Property<int?>("ScreenHeight")
                        .HasColumnType("integer");

                    b.Property<int?>("ScreenWidth")
                        .HasColumnType("integer");

                    b.Property<int?>("VideoCodec")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.ToTable("QoEs");
                });

            modelBuilder.Entity("SharedHost.Models.Shell.ScriptModel", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Script")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("ScriptModel");
                });

            modelBuilder.Entity("SharedHost.Models.Shell.ShellSession", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ModelID")
                        .HasColumnType("integer");

                    b.Property<string>("Output")
                        .HasColumnType("text");

                    b.Property<string>("Script")
                        .HasColumnType("text");

                    b.Property<DateTime>("Time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("WorkerID")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("ModelID");

                    b.HasIndex("WorkerID");

                    b.ToTable("CachedSession");
                });

            modelBuilder.Entity("WorkerManager.Models.OwnerCredential", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime>("ValidUntil")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("WorkerClusterID")
                        .HasColumnType("integer");

                    b.Property<string>("token")
                        .HasColumnType("text");

                    b.HasKey("Name");

                    b.HasIndex("WorkerClusterID");

                    b.ToTable("Owner");
                });

            modelBuilder.Entity("WorkerManager.SlaveDevices.ClusterWorkerNode", b =>
                {
                    b.Property<int>("PrivateID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CPU")
                        .HasColumnType("text");

                    b.Property<string>("GPU")
                        .HasColumnType("text");

                    b.Property<int?>("GlobalID")
                        .HasColumnType("integer");

                    b.Property<string>("OS")
                        .HasColumnType("text");

                    b.Property<string>("PrivateIP")
                        .HasColumnType("text");

                    b.Property<int?>("QoEID")
                        .HasColumnType("integer");

                    b.Property<int>("RAMcapacity")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Register")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<string>("RemoteToken")
                        .HasColumnType("text");

                    b.Property<string>("SignallingUrl")
                        .HasColumnType("text");

                    b.Property<string>("_workerState")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("agentFailedPing")
                        .HasColumnType("integer");

                    b.Property<string>("agentUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("coreUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("sessionFailedPing")
                        .HasColumnType("integer");

                    b.HasKey("PrivateID");

                    b.HasIndex("QoEID");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("SharedHost.Models.Device.WorkerNode", b =>
                {
                    b.HasOne("SharedHost.Models.Cluster.LocalCluster", null)
                        .WithMany("Slave")
                        .HasForeignKey("LocalClusterID");
                });

            modelBuilder.Entity("SharedHost.Models.Shell.ShellSession", b =>
                {
                    b.HasOne("SharedHost.Models.Shell.ScriptModel", "Model")
                        .WithMany()
                        .HasForeignKey("ModelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SharedHost.Models.Device.WorkerNode", "Slave")
                        .WithMany()
                        .HasForeignKey("WorkerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Model");

                    b.Navigation("Slave");
                });

            modelBuilder.Entity("WorkerManager.Models.OwnerCredential", b =>
                {
                    b.HasOne("SharedHost.Models.Cluster.LocalCluster", "WorkerCluster")
                        .WithMany()
                        .HasForeignKey("WorkerClusterID");

                    b.Navigation("WorkerCluster");
                });

            modelBuilder.Entity("WorkerManager.SlaveDevices.ClusterWorkerNode", b =>
                {
                    b.HasOne("SharedHost.Models.Session.QoE", "QoE")
                        .WithMany()
                        .HasForeignKey("QoEID");

                    b.Navigation("QoE");
                });

            modelBuilder.Entity("SharedHost.Models.Cluster.LocalCluster", b =>
                {
                    b.Navigation("Slave");
                });
#pragma warning restore 612, 618
        }
    }
}
