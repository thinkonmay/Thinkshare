// <auto-generated />
using System;
using DbSchema.LocalDb;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace WorkerManager.Migrations
{
    [DbContext(typeof(ClusterDbContext))]
    partial class ClusterDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("DbSchema.LocalDb.Models.ClusterWorkerNode", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CPU")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GPU")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OS")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PrivateIP")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RAMcapacity")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Register")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("current_timestamp");

                    b.HasKey("ID");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("DbSchema.LocalDb.Models.Log", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("ClusterWorkerNodeID")
                        .HasColumnType("integer");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<DateTime>("LogTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("current_timestamp");

                    b.HasKey("ID");

                    b.HasIndex("ClusterWorkerNodeID");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("DbSchema.LocalDb.Models.OwnerCredential", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime>("ValidUntil")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("WorkerClusterID")
                        .HasColumnType("integer");

                    b.Property<string>("token")
                        .HasColumnType("text");

                    b.HasKey("Name");

                    b.HasIndex("WorkerClusterID");

                    b.ToTable("Owner");
                });

            modelBuilder.Entity("SharedHost.Models.Cluster.LocalCluster", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Register")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<string>("Token")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Clusters");
                });

            modelBuilder.Entity("SharedHost.Models.Shell.ScriptModel", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Script")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("ScriptModels");
                });

            modelBuilder.Entity("SharedHost.Models.Shell.ShellSession", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("ClusterWorkerNodeID")
                        .HasColumnType("integer");

                    b.Property<int?>("ModelID")
                        .HasColumnType("integer");

                    b.Property<string>("Output")
                        .HasColumnType("text");

                    b.Property<DateTime>("Time")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("current_timestamp");

                    b.HasKey("ID");

                    b.HasIndex("ClusterWorkerNodeID");

                    b.HasIndex("ModelID");

                    b.ToTable("CachedSession");
                });

            modelBuilder.Entity("DbSchema.LocalDb.Models.Log", b =>
                {
                    b.HasOne("DbSchema.LocalDb.Models.ClusterWorkerNode", null)
                        .WithMany("Logs")
                        .HasForeignKey("ClusterWorkerNodeID");
                });

            modelBuilder.Entity("DbSchema.LocalDb.Models.OwnerCredential", b =>
                {
                    b.HasOne("SharedHost.Models.Cluster.LocalCluster", "WorkerCluster")
                        .WithMany()
                        .HasForeignKey("WorkerClusterID");

                    b.Navigation("WorkerCluster");
                });

            modelBuilder.Entity("SharedHost.Models.Shell.ShellSession", b =>
                {
                    b.HasOne("DbSchema.LocalDb.Models.ClusterWorkerNode", null)
                        .WithMany("Shells")
                        .HasForeignKey("ClusterWorkerNodeID");

                    b.HasOne("SharedHost.Models.Shell.ScriptModel", "Model")
                        .WithMany()
                        .HasForeignKey("ModelID");

                    b.Navigation("Model");
                });

            modelBuilder.Entity("DbSchema.LocalDb.Models.ClusterWorkerNode", b =>
                {
                    b.Navigation("Logs");

                    b.Navigation("Shells");
                });
#pragma warning restore 612, 618
        }
    }
}
